(input) => {
    const $io1 = (input) =>
        "number" === typeof input.x &&
        "number" === typeof input.y &&
        "number" === typeof input.z;
    const $io2 = (input) =>
        "number" === typeof input.x &&
        "number" === typeof input.y &&
        "point" === input.type;
    const $io3 = (input) =>
        "object" === typeof input.p1 &&
        null !== input.p1 &&
        $io4(input.p1) &&
        "object" === typeof input.p2 &&
        null !== input.p2 &&
        $io4(input.p2) &&
        "line" === input.type;
    const $io4 = (input) =>
        "number" === typeof input.x && "number" === typeof input.y;
    const $io5 = (input) =>
        "object" === typeof input.p1 &&
        null !== input.p1 &&
        $io4(input.p1) &&
        "object" === typeof input.p2 &&
        null !== input.p2 &&
        $io4(input.p2) &&
        "object" === typeof input.p3 &&
        null !== input.p3 &&
        $io4(input.p3) &&
        "triangle" === input.type;
    const $io6 = (input) =>
        "object" === typeof input.p1 &&
        null !== input.p1 &&
        $io4(input.p1) &&
        "object" === typeof input.p2 &&
        null !== input.p2 &&
        $io4(input.p2) &&
        "object" === typeof input.p3 &&
        null !== input.p3 &&
        $io4(input.p3) &&
        "object" === typeof input.p4 &&
        null !== input.p4 &&
        $io4(input.p4) &&
        "rectangle" === input.type;
    const $io7 = (input) =>
        Array.isArray(input.points) &&
        input.points.every(
            (elem) => "object" === typeof elem && null !== elem && $io4(elem),
        ) &&
        "polyline" === input.type;
    const $io8 = (input) =>
        "object" === typeof input.outer &&
        null !== input.outer &&
        $io9(input.outer) &&
        Array.isArray(input.inner) &&
        input.inner.every(
            (elem) => "object" === typeof elem && null !== elem && $io9(elem),
        ) &&
        "polygon" === input.type;
    const $io9 = (input) =>
        Array.isArray(input.points) &&
        input.points.every(
            (elem) => "object" === typeof elem && null !== elem && $io4(elem),
        );
    const $io10 = (input) =>
        "object" === typeof input.centroid &&
        null !== input.centroid &&
        $io4(input.centroid) &&
        "number" === typeof input.radius &&
        "circle" === input.type;
    const $any = typia_1.default.misc.createClone.any;
    const $throws = typia_1.default.misc.createClone.throws;
    const $cp0 = (input) => input.map((elem) => $any(elem));
    const $cp1 = (input) =>
        input.map((elem) =>
            "object" === typeof elem && null !== elem ? $co4(elem) : elem,
        );
    const $cp2 = (input) =>
        input.map((elem) =>
            "object" === typeof elem && null !== elem ? $co9(elem) : elem,
        );
    const $co1 = (input) => ({
        x: input.x,
        y: input.y,
        z: input.z,
    });
    const $co2 = (input) => ({
        x: input.x,
        y: input.y,
        type: input.type,
    });
    const $co3 = (input) => ({
        p1:
            "object" === typeof input.p1 && null !== input.p1
                ? $co4(input.p1)
                : input.p1,
        p2:
            "object" === typeof input.p2 && null !== input.p2
                ? $co4(input.p2)
                : input.p2,
        type: input.type,
    });
    const $co4 = (input) => ({
        x: input.x,
        y: input.y,
    });
    const $co5 = (input) => ({
        p1:
            "object" === typeof input.p1 && null !== input.p1
                ? $co4(input.p1)
                : input.p1,
        p2:
            "object" === typeof input.p2 && null !== input.p2
                ? $co4(input.p2)
                : input.p2,
        p3:
            "object" === typeof input.p3 && null !== input.p3
                ? $co4(input.p3)
                : input.p3,
        type: input.type,
    });
    const $co6 = (input) => ({
        p1:
            "object" === typeof input.p1 && null !== input.p1
                ? $co4(input.p1)
                : input.p1,
        p2:
            "object" === typeof input.p2 && null !== input.p2
                ? $co4(input.p2)
                : input.p2,
        p3:
            "object" === typeof input.p3 && null !== input.p3
                ? $co4(input.p3)
                : input.p3,
        p4:
            "object" === typeof input.p4 && null !== input.p4
                ? $co4(input.p4)
                : input.p4,
        type: input.type,
    });
    const $co7 = (input) => ({
        points: Array.isArray(input.points) ? $cp1(input.points) : input.points,
        type: input.type,
    });
    const $co8 = (input) => ({
        outer:
            "object" === typeof input.outer && null !== input.outer
                ? $co9(input.outer)
                : input.outer,
        inner: Array.isArray(input.inner) ? $cp2(input.inner) : input.inner,
        type: input.type,
    });
    const $co9 = (input) => ({
        points: Array.isArray(input.points) ? $cp1(input.points) : input.points,
    });
    const $co10 = (input) => ({
        centroid:
            "object" === typeof input.centroid && null !== input.centroid
                ? $co4(input.centroid)
                : input.centroid,
        radius: input.radius,
        type: input.type,
    });
    return Array.isArray(input) ? $cp0(input) : input;
};
